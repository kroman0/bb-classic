*** Settings ***

Library  OperatingSystem

Library  keywords.py


*** Variables ***

${PORT} =  8080
${DOMAIN} =  localhost
${APP_URL} =  http://${DOMAIN}:${PORT}
${base_path} =  docs/
${base_login} =  ${base_path}login.png
${base_mypage} =  ${base_path}mypage.png
${base_projects} =  ${base_path}projects.png
${base_companies} =  ${base_path}companies.png
${base_company} =  ${base_path}company.png
${base_time_report} =  ${base_path}time_report.png
${base_todos} =  ${base_path}todos.png
${base_people} =  ${base_path}people.png
${base_project_overview} =  ${base_path}project_overview.png
${base_project_messages} =  ${base_path}project_messages.png
${base_project_todos} =  ${base_path}project_todos.png
${base_project_calendar} =  ${base_path}project_calendar.png
${base_project_time} =  ${base_path}project_time.png
${base_project_files} =  ${base_path}project_files.png
${base_project_categories} =  ${base_path}project_categories.png
${base_project_people} =  ${base_path}project_people.png
${base_project_message} =  ${base_path}project_message.png
${base_project_todolist} =  ${base_path}project_todolist.png
${base_project_todo} =  ${base_path}project_todo.png
${base_project_calendar_entry} =  ${base_path}project_calendar_entry.png
${base_project_file} =  ${base_path}project_file.png
${base_project_category} =  ${base_path}project_category.png
${base_project_person} =  ${base_path}project_person.png
${base_project_message_comments} =  ${base_path}project_message_comments.png
${base_project_calendar_entry_comments} =  ${base_path}project_calendar_entry_comments.png
${base_project_todo_comments} =  ${base_path}project_todo_comments.png

${REMOTE_URL} =
${SESSION_ID} =


*** Keywords ***

an bb-classic app
    [Documentation]  Go to application page.
    Test user login

an bb-classic app login page
    [Documentation]  Go to application login page.
    Reload Page Until  Location should contain  login
    Page should contain  BB
    Title should be  BB

enter ${name} field
    [Documentation]  Enter "test" text in input field.
    Input Text  name=${name}  test

click on ${name} link in navbar
    [Documentation]  Click on link in navbar.
    Click link  xpath=//*[contains(@class,"navbar")]//a[contains(text(),${name})]

heading should be ${heading}
    [Documentation]  Check if heading contain text.
    Page should contain element  xpath=//h1[contains(text(),${heading})]

Wait for data loading
    [Documentation]  Waiting for loading data from server.
    Wait Until Keyword Succeeds  5 sec  0.1 sec  Element Should Not Be Visible  css=.alert

Click on ${text} in ${state} state and wait effect
    [Documentation]  Switch state filter, wait, click on link in state block and wait.
    Click link  ${state}
    Wait Until Keyword Succeeds  5 sec  0.1 sec  Element Should Be Visible  xpath=//*[@id="projects_${state}"]//a[contains(text(),${text})]
    Click element  xpath=//*[@id="projects_${state}"]//a[contains(text(),${text})]
    Wait Until Keyword Succeeds  5 sec  0.1 sec  Element Should Be Visible  xpath=//*[@id="projects_${state}"]//*[@id="projects_${state}_${text[-2]}"]//a

Click on ${text} in projectnav
    [Documentation]  Click on link in project navigation.
    Click element  xpath=//*[contains(@class,"projectnav")]//a[contains(text(),${text})]
    Wait for data loading

Start app
    [Documentation]  Start application.
    Start Process  bin/dev_appserver app --skip_sdk_update_check

Start Browser For Test
    [Documentation]  Start browser.
    Start browser
    Set Window Size  1024  768
#    Maximize browser window

Close All Browsers and Report Status
    [Documentation]  Close browser and report test status.
    Close All Browsers
    Report test status

Stop app
    [Documentation]  Stop application.
    Run  pkill -f dev_appserver
    ${out} =  Read Process Output
    Append to file  app.log  ${out}
    Stop All Processes

Reload Page Until
    [Arguments]  @{condition}
    [Documentation]  Reload page 10 times until condition wil be true.
    :FOR  ${try}  IN RANGE  10
    \   ${status}=  Run Keyword And Ignore Error  @{condition}
    \   ${raise error}=  Set Variable If  ${status}[0]=='PASS'  'False'  'True'
    \   Run Keyword If  ${status}[0]=='PASS'  Exit For Loop
    \   Sleep  1
    \   Reload Page
    Run Keyword If  ${raise error}=="True"  Fail  "${condition}"

Test user login
    [Documentation]  Login by test user.
    Reload Page Until  Location should contain  login
    Input Text  name=subdomain  test
    Input Text  name=username  test
    Input Password  name=password  test
    Click button  Log in
    Wait Until Page Contains  First Last  15 sec

Test user logout
    [Documentation]  Logout.
    Click link  First Last
    Click link  Logout
    Click link  log in

Start browser
    [Documentation]  Prepare environment and start browser.
    ${BROWSER} =  Get Environment Variable  ROBOT_BROWSER  Firefox
    ${REMOTE_URL} =  Get Environment Variable  ROBOT_REMOTE_URL  ${REMOTE_URL}
    ${BUILD_MANUAL} =  Evaluate  random.randint(0,10**6)  random
    ${BUILD_NUMBER} =  Get Environment Variable  ROBOT_BUILD_NUMBER  manual-${BUILD_MANUAL}
    ${DESIRED_CAPABILITIES} =  Get Environment Variable  ROBOT_DESIRED_CAPABILITIES  platform:Linux
    ${BUILD_TAGS} =  Evaluate  " ".join(${TEST_TAGS})
    ${BUILD_INFO} =  Set variable  build:${BUILD_NUMBER},name:${TEST_NAME},tags:${BUILD_TAGS},public:public
    Open browser  ${APP_URL}  ${BROWSER}  remote_url=${REMOTE_URL}  desired_capabilities=${DESIRED_CAPABILITIES},${BUILD_INFO}
    Run keyword and ignore error  Set session id

Set session id
    [Documentation]  Get session id and set variable.
    Keyword should exist  Get session id
    ${SESSION_ID} =  Get session id
    Set test variable  ${SESSION_ID}  ${SESSION_ID}

Report test status
    [Documentation]  Report test status to saucelabs.
    Run keyword unless  '${SESSION_ID}' == ''  Report sauce status  ${SESSION_ID}  ${TEST_STATUS}
